})
}
normal_fn <- function(meanpar=NULL, sdpar=NULL){
out <- purrr::partial(rnorm,
mean = meanpar,
sd = sdpar)
return(out)
}
lognormal_fn <- function(meanlogpar=NULL, sdlogpar=NULL){
out <- purrr::partial(rlnorm,
meanlog = meanlogpar,
sdlog = sdlogpar)
return(out)
}
one.model.run <- function(beta, sigma, k, c, p, xstart, times){
#build parameter matrix
params = list(beta=beta,
sigma=sigma,
c=c,
k=k,
p=p)
out <- as.data.frame(lsoda(y = xstart, times = times, func = simple.target, parms = params))
out.rep <- dplyr::select(out, time, V)
return(out.rep)
}
add.seq.ID <- function(dat, employID){
dat$employIDs <- employID
return(dat)
}
add.noise<- function(par){
par.new <-  rnorm(n=1, mean=par, sd=.3*par)
#not allowed to be negative, so if, so, give a small number:
if(par.new<0){
par.new = .0000001
}
return(par.new)
}
out = one.model.run(beta=1*10^-7,
k=1,
p= 100,
c=3.8,
sigma = 3.8,
xstart = c(Tc = 4*10^8, E=0,I=0,V=4.9),
times=1:20)
#with(out, plot(time, V, type="l", xlim=c(0,5)))
with(out, plot(time, log10(V), type="l", xlim=c(0,20), ylim=c(0,12)))
#wrap model and run many trajectories
wrap.viral.loads <- function(beta.mean, sigma.mean, k.mean,
c.mean, p.mean, p.sd, n.pop, times, xstart){
#shake the parameters with a little noise every time
beta.list = as.list(rep(beta.mean, length=n.pop))
beta.list = lapply(beta.list, add.noise)
sigma.list = as.list(rep(sigma.mean, length=n.pop))
sigma.list = lapply(sigma.list, add.noise)
p.list = as.list(rep(p.mean, length=n.pop))
p.list = lapply(p.list, add.noise)
k.list = as.list(rep(k.mean, length=n.pop))
k.list = lapply(k.list, add.noise)
c.list = as.list(rep(c.mean, length=n.pop))
c.list = lapply(c.list, add.noise)
#and run over all the individuals in the pop
out.list = mapply(one.model.run, beta=beta.list, k = k.list,
sigma=sigma.list, c=c.list, p=p.list,
MoreArgs = list(xstart=xstart, times=times), SIMPLIFY = FALSE)
#each entry in list givens another individual
employ.ID.list <- as.list(1:n.pop)
out.list <- mapply(add.seq.ID, dat = out.list, employID = employ.ID.list, SIMPLIFY = FALSE)
#and bind
out.df <- do.call("rbind", out.list)
head(out.df)
#and attach par
out.df$beta <- rep(c(unlist(beta.list)), each = length(times))
out.df$sigma <- rep(c(unlist(sigma.list)), each = length(times))
out.df$c <- rep(c(unlist(c.list)), each = length(times))
out.df$k <- rep(c(unlist(k.list)), each = length(times))
out.df$p <- rep(c(unlist(p.list)), each = length(times))
#and return
return(out.df)
}
out <- wrap.viral.loads(beta.mean=1*10^-7,
k.mean=1,
p.mean= 100,
c.mean=3.8,
sigma.mean = 3.8,
xstart = c(Tc = 4*10^8, E=0,I=0,V=4.9),
times=1:50,
out <- wrap.viral.loads(beta.mean=1*10^-7,
k.mean=1,
p.mean= 100,
c.mean=3.8,
sigma.mean = 3.8,
xstart = c(Tc = 4*10^8, E=0,I=0,V=4.9),
times=1:50,
n.pop = 100)
head(cars)
plot(cars)
shiny::runApp('Desktop/berkeley/IB114/2021/ModelingApp')
source('~/Desktop/berkeley/Boots Lab/Multihost Multipathogen/Basic.R', echo=TRUE)
source('~/Desktop/berkeley/Boots Lab/Multihost Multipathogen/Basic.R', echo=TRUE)
source('~/Desktop/berkeley/Boots Lab/Multihost Multipathogen/Basic.R', echo=TRUE)
source('~/Desktop/berkeley/Boots Lab/Multihost Multipathogen/Basic.R', echo=TRUE)
plot(out)
p1 <- ggplot(out, aes(time,value)) + geom_line() + facet_grid(series ~ .)
print(p1)
print(p1)
library(reshape2)
out2 <- melt(out ,  id.vars = 'time', variable.name = 'series')
p1 <- ggplot(out2, aes(time,value)) + geom_line() + facet_grid(series ~ .)
print(p1)
colnames(out) <- c("time", "HS", "HI","BS","BI","SS","SI","E")
colnames(out) <- c("time", "HS", "HI","BS","BI","SS","SI","E")
View(out)
source('~/Desktop/berkeley/Boots Lab/Multihost Multipathogen/Basic.R', echo=TRUE)
source('~/Desktop/berkeley/Boots Lab/Multihost Multipathogen/Basic.R', echo=TRUE)
source('~/Desktop/berkeley/Boots Lab/Multihost Multipathogen/Basic.R', echo=TRUE)
p1 <- ggplot(out, aes(time,SI))
print(p1)
p1 <- ggplot(out, aes(time,SI)) +
geom_line()
print(p1)
source('~/Desktop/berkeley/Boots Lab/Multihost Multipathogen/Basic.R', echo=TRUE)
p2 <- ggplot(out, aes(time,E)) +
geom_line()
print(p2)
data_out <- data.frame(time = data$time,                            # Reshape data frame
y = c(data$HS, data$HI, data$BS, data$BI, data$SS, data$SI),
group = c(rep("HS", nrow(data)),
rep("HI", nrow(data)),
rep("BS", nrow(data)),
rep("BI", nrow(data)),
rep("SS", nrow(data)),
rep("SI", nrow(data))))
data <- data.frame(ode(y = N0,
times = t,
func=BEES, parms=p,
method = "ode45"))
colnames(data) <- c("time", "HS", "HI","BS","BI","SS","SI","E")
data_out <- data.frame(time = data$time,                            # Reshape data frame
y = c(data$HS, data$HI, data$BS, data$BI, data$SS, data$SI),
group = c(rep("HS", nrow(data)),
rep("HI", nrow(data)),
rep("BS", nrow(data)),
rep("BI", nrow(data)),
rep("SS", nrow(data)),
rep("SI", nrow(data))))
pt <- ggplot(data_out, aes(x, y, col = group)) +             # Create ggplot2 plot
geom_line()
print(pt)
pt <- ggplot(data_out, aes(time, y, col = group)) +             # Create ggplot2 plot
geom_line()
print(pt)
p2 <- p1 + facet_grid(group ~ .)
print(p2)
p2 <- pt + facet_grid(group ~ .)
print(p2)
p2 <- pt + facet_grid(group ~ .,scales="free_y")
print(p2)
print(pt)
honeysGone <- data.frame(var = c("HI"),
time = c(p2[["re_t"]]),
value = c(-1),
method = c("add"))
honeysGone <- data.frame(var = "HI",
time = p2[["re_t"]],
value = -1,
method = "add")
honeysGone <- data.frame(var = "HI",
time = p[["re_t"]],
value = -1,
method = "add")
p <- list(beta1=beta1,beta2=beta2,beta3=beta3,omega1=omega1,omega2=omega2,omega3=omega3,delta=delta,re_t=re_t)
re_t <- 365
source('~/Desktop/berkeley/Boots Lab/Multihost Multipathogen/Basic.R', echo=TRUE)
p3 <- ggplot(data_out, aes(time, y, col = group)) +             # Create ggplot2 plot
geom_line()
p3 <- ggplot(data2_out, aes(time, y, col = group)) +             # Create ggplot2 plot
geom_line()
print(p3)
p4 <- p3 + facet_grid(group ~ .,scales="free_y") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
print(p4)
p3 <- ggplot(data2_out, aes(time, y, col = group)) +             # Create ggplot2 plot
geom_line() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
print(p3)
print(pt)
pt <- ggplot(data_out, aes(time, y, col = group)) +             # Create ggplot2 plot
geom_line() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
print(pt)
print(p3)
shiny::runApp('Desktop/berkeley/IB114/2021/ModelingApp')
require(stats)
#Domain setup
T <- 5
dt <- 0.01 #s
n <- T/dt
F <-1/dt
df <- 1/T
freq<-5 #Hz
t <- seq(0,T,by=dt) #also try ts function
#CREATE OUR TIME SERIES DATA
y <- 10*sin(2*pi*freq*t) +4* sin(2*pi*20*t)
#CREATE OUR FREQUENCY ARRAY
f <- 1:length(t)/T
#FOURIER TRANSFORM WORK
Y <- fft(y)
mag <- sqrt(Re(Y)^2+Im(Y)^2)*2/n
phase <- atan(Im(Y)/Re(Y))
Yr <- Re(Y)
Yi <- Im(Y)
#PLOTTING
layout(matrix(c(1,2), 2, 1, byrow = TRUE))
plot(t,y,type=”l”,xlim=c(0,T))
plot(f[1:length(f)/2],mag[1:length(f)/2],type=”l”)
plot(t,y,type=”l”,xlim=c(0,T))
plot(t,y,type='l',xlim=c(0,T))
plot(f[1:length(f)/2],mag[1:length(f)/2],type='l')
T
require(stats)
#Domain setup
T <- 5
dt <- 0.01 #s
n <- T/dt
F <-1/dt
df <- 1/T
freq1<-5 #Hz
freq2 <- 20
t <- seq(0,T,by=dt) #also try ts function
#CREATE OUR TIME SERIES DATA
y <- 10*sin(2*pi*freq*t) +4* sin(2*pi*freq2*t)
f <- 1:length(t)/T
source('~/Desktop/berkeley/Boots Lab/Other Stuff/FFT_script.R', echo=TRUE)
phase
mag
length(f)/2
n
mag <- sqrt(Re(Y)^2+Im(Y)^2)*2
plot(f[1:length(f)/2],mag[1:length(f)/2],type='l')
mag <- sqrt(Re(Y)^2+Im(Y)^2)*2/n
plot(f[1:length(f)/2],mag[1:length(f)/2],type='l')
source('~/Desktop/berkeley/Boots Lab/Other Stuff/FFT_script.R', echo=TRUE)
source('~/Desktop/berkeley/Boots Lab/Other Stuff/FFT_script.R', echo=TRUE)
plot(f[1:length(f)/2],phase[1:length(f)/2],type='l')
head(mtcars)
summary(mtcars)
mydata <- mtcars
fit1 <- lm(mpg ~ hp, data=mydata)
fit1
confint(fit1)
plot(predict(fit1),resid(fit1))
fit2 <- lm(mpg ~ factor(am)+hp, data=mydata)
fit3 <- lm(mpg ~ factor(am)+hp+wt, data=mydata)
anova(fit2,fit3)
anova(fit,fit2,fit3)
fit <- lm(mpg ~ factor(am), data=mydata)
anova(fit,fit2,fit3)
summary(mydata)
head(mydata)
var(mydata$mpg)
summary(mydata)
mtcars[mtcars$mpg>21]
mtcars[mtcars$mpg>21,]
myvariable = 12
myvariable = 14
y = 2
myvariable + y
e^14
e
2.1723^14
mtcars
mydata = mtcars
View(mydata)
head(mydata)
head(mydata,2)
summary(mydata)
mydata$mpg
var(mydata$mpg)
carsmpgvariance = var(mydata$mpg)
carsmpgmean = mean(mydata$mpg)
mydata[1,]
mydata[4,]
mydata[,3]
mydata[6,5]
newbetterdata = mydata[mydata$mpg>carsmpgmean,]
View(mydata)
View(newbetterdata)
newbetterdata = mydata[mydata$mpg==21,]
valiantdata = mydata[6,]
View(valiantdata)
mydata$mpg
which(mydata$mpg<15)
mydata[which(mydata$mpg<15),]
mydata$mpg>15
fit1 <- lm(mpg ~ hp, data=mydata)
print(fit1)
plot(predict(fit1),resid(fit1))
plot(predict(fit1),resid(fit1))
abline(h=0,v=0,col="red")
summary(fit1)
confint(fit1)
fit <- lm(mpg ~ factor(am), data=mydata)
fit2 <- lm(mpg ~ factor(am)+hp, data=mydata)
summary(fit2)
fit3 <- lm(mpg ~ factor(am)+hp+wt, data=mydata)
summary(fit3)
mydata = mtcars
head(cars)
View(mydata)
mydata = mtcars
glm(vs ~ mpg, data=mydata, family=binomial)
test <- glm(vs ~ mpg, data=mydata, family=binomial)
summary(test)
histogram(mydata$vs)
histo(mydata$vs)
hist(mydata$vs)
test <- glm(vs ~ mpg, data=mydata, family=binomial)
summary(test)
output <- glm(gear~hp+mpg, data=mydata, family=poisson)
output
summary(output)
output2 <- lm(hp~mpg+gear, data=mydata)
summary(output2)
output2 <- lm(hp~mpg+factor(gear), data=mydata)
summary(output2)
x <- FALSE
typeof(x)
TOWN <- "London"
options(
keep.source=TRUE,
stringsAsFactors=FALSE,
encoding="UTF-8"
)
set.seed(998468235L,kind="L'Ecuyer")
mcopts <- list(preschedule=FALSE,set.seed=TRUE)
library(ggplot2)
theme_set(theme_bw())
library(devtools)
install_github("kingaa/pomp")
read.csv(text="
town,loglik,loglik.sd,mu,delay,sigma,gamma,rho,R0,amplitude,alpha,iota,cohort,psi,S_0,E_0,I_0,R_0,sigmaSE
Bedwellty,-1125.1,0.14,0.02,4,57.9,146,0.311,24.7,0.16,0.937,0.0396,0.351,0.951,0.0396,2.64e-05,2.45e-05,0.96,0.0611
Birmingham,-3239.3,1.55,0.02,4,45.6,32.9,0.544,43.4,0.428,1.01,0.343,0.331,0.178,0.0264,8.96e-05,0.000335,0.973,0.0611
Bradford,-2586.6,0.68,0.02,4,45.6,129,0.599,32.1,0.236,0.991,0.244,0.297,0.19,0.0365,7.41e-06,4.59e-06,0.964,0.0451
Bristol,-2681.6,0.5,0.02,4,64.3,82.6,0.626,26.8,0.203,1.01,0.441,0.344,0.201,0.0358,9.62e-06,5.37e-06,0.964,0.0392
Cardiff,-2364.9,0.73,0.02,4,39,143,0.602,34.4,0.223,0.996,0.141,0.267,0.27,0.0317,1.01e-05,9.21e-06,0.968,0.0539
Consett,-1362.9,0.73,0.02,4,42.6,172,0.65,35.9,0.2,1.01,0.0731,0.31,0.406,0.0322,1.83e-05,1.97e-05,0.968,0.0712
Dalton.in.Furness,-726.1,0.3,0.02,4,73.6,257,0.455,28.3,0.203,0.989,0.0386,0.421,0.818,0.0387,2.23e-05,2.36e-05,0.961,0.0779
Halesworth,-318.6,0.51,0.02,4,49.6,210,0.754,33.1,0.381,0.948,0.00912,0.547,0.641,0.0526,1.99e-05,2.82e-05,0.947,0.0748
Hastings,-1583.7,0.21,0.02,4,56.3,74.1,0.695,34.2,0.299,1,0.186,0.329,0.396,0.0233,5.61e-06,3.4e-06,0.977,0.0955
Hull,-2729.4,0.39,0.02,4,42.1,73.9,0.582,38.9,0.221,0.968,0.142,0.275,0.256,0.0371,1.2e-05,1.13e-05,0.963,0.0636
Leeds,-2918.6,0.23,0.02,4,40.7,35.1,0.666,47.8,0.267,1,1.25,0.592,0.167,0.0262,6.04e-05,3e-05,0.974,0.0778
Lees,-548.1,1.1,0.02,4,45.6,244,0.612,29.7,0.153,0.968,0.0311,0.648,0.681,0.0477,2.66e-05,2.08e-05,0.952,0.0802
Liverpool,-3403.1,0.34,0.02,4,49.4,39.3,0.494,48.1,0.305,0.978,0.263,0.191,0.136,0.0286,0.000184,0.00124,0.97,0.0533
London,-3804.9,0.16,0.02,4,28.9,30.4,0.488,56.8,0.554,0.976,2.9,0.557,0.116,0.0297,5.17e-05,5.14e-05,0.97,0.0878
Manchester,-3250.9,0.66,0.02,4,34.4,56.8,0.55,32.9,0.29,0.965,0.59,0.362,0.161,0.0489,2.41e-05,3.38e-05,0.951,0.0551
Mold,-296.5,0.25,0.02,4,67.4,301,0.131,21.4,0.271,1.04,0.0145,0.436,2.87,0.064,2.61e-05,2.27e-05,0.936,0.0544
Northwich,-1195.1,2.25,0.02,4,45.6,147,0.795,30.1,0.423,0.948,0.0602,0.236,0.402,0.0213,1.32e-05,1.58e-05,0.979,0.0857
Nottingham,-2703.5,0.53,0.02,4,70.2,115,0.609,22.6,0.157,0.982,0.17,0.34,0.258,0.05,1.36e-05,1.41e-05,0.95,0.038
Oswestry,-696.1,0.49,0.02,4,37.3,168,0.631,52.9,0.339,1.04,0.0298,0.263,0.476,0.0218,1.56e-05,1.61e-05,0.978,0.0699
Sheffield,-2810.7,0.21,0.02,4,54.3,62.2,0.649,33.1,0.313,1.02,0.853,0.225,0.175,0.0291,6.04e-05,8.86e-05,0.971,0.0428
",stringsAsFactors=FALSE) -> mles
## ----mle----------------------------------------------------------------------
mles %>% filter(town==TOWN) -> mle
paramnames <- c("R0","mu","sigma","gamma","alpha","iota",
"rho","sigmaSE","psi","cohort","amplitude",
"S_0","E_0","I_0","R_0")
theta <- unlist(mle[paramnames])
## ----mle-table,echo=FALSE-----------------------------------------------------
library(knitr)
kable(subset(mle,select=-c(town,mu,loglik.sd,delay,S_0,E_0,I_0,R_0)),row.names=FALSE)
## ----pfilter1-----------------------------------------------------------------
library(foreach)
library(doParallel)
library(doRNG)
registerDoParallel()
registerDoRNG(998468235L)
foreach(i=1:4) %dopar% {
m1 %>% pfilter(params=theta,Np=10000)
} -> pfs
pfs %>% sapply(logLik) %>% logmeanexp(se=TRUE)
## ----sims1,fig.height=8-------------------------------------------------------
m1 %>%
simulate(params=theta,nsim=9,format="d",include.data=TRUE) %>%
ggplot(aes(x=time,y=cases,group=.id,color=(.id=="data")))+
guides(color=FALSE)+
geom_line()+facet_wrap(~.id,ncol=2)
## ----sims2--------------------------------------------------------------------
m1 %>%
simulate(params=theta,nsim=200,format="d",include.data=TRUE) %>%
select(time,.id,cases) %>%
mutate(
data=if_else(.id=="data","data","simulation")
) %>%
group_by(time,data) %>%
summarize(
p=c("lo","med","hi"),
q=quantile(cases,prob=c(0.05,0.5,0.95),names=FALSE)
) %>%
spread(p,q) %>%
ggplot(aes(x=time,y=med,color=data,fill=data,ymin=lo,ymax=hi))+
geom_ribbon(alpha=0.2)
set.seed(594709947L)
library(ggplot2)
library(tidyverse)
library(pomp)
mles %>% filter(town==TOWN) -> mle
paramnames <- c("R0","mu","sigma","gamma","alpha","iota",
"rho","sigmaSE","psi","cohort","amplitude",
"S_0","E_0","I_0","R_0")
theta <- unlist(mle[paramnames])
## ----mle-table,echo=FALSE-----------------------------------------------------
library(knitr)
kable(subset(mle,select=-c(town,mu,loglik.sd,delay,S_0,E_0,I_0,R_0)),row.names=FALSE)
## ----pfilter1-----------------------------------------------------------------
library(foreach)
library(doParallel)
library(doRNG)
registerDoParallel()
registerDoRNG(998468235L)
foreach(i=1:4) %dopar% {
m1 %>% pfilter(params=theta,Np=10000)
} -> pfs
pfs %>% sapply(logLik) %>% logmeanexp(se=TRUE)
## ----sims1,fig.height=8-------------------------------------------------------
m1 %>%
simulate(params=theta,nsim=9,format="d",include.data=TRUE) %>%
ggplot(aes(x=time,y=cases,group=.id,color=(.id=="data")))+
guides(color=FALSE)+
geom_line()+facet_wrap(~.id,ncol=2)
## ----sims2--------------------------------------------------------------------
m1 %>%
simulate(params=theta,nsim=200,format="d",include.data=TRUE) %>%
select(time,.id,cases) %>%
mutate(
data=if_else(.id=="data","data","simulation")
) %>%
group_by(time,data) %>%
summarize(
p=c("lo","med","hi"),
q=quantile(cases,prob=c(0.05,0.5,0.95),names=FALSE)
) %>%
spread(p,q) %>%
ggplot(aes(x=time,y=med,color=data,fill=data,ymin=lo,ymax=hi))+
geom_ribbon(alpha=0.2)
TOWN <- "London"
randint(1,20)
sample(1:20, 5, replace=T)
NUMSAMPLES <- 10000
d1 <- sample(1:20, NUMSAMPLES, replace=T)
d2 <- sample(1:20, NUMSAMPLES, replace=T)
d3 <- c()
for (i in 1:NUMSAMPLES){
d3[i] <- max(d1[i],d2[i])
}
hist(d3)
NUMSAMPLES <- 1000000
d1 <- sample(1:20, NUMSAMPLES, replace=T)
d2 <- sample(1:20, NUMSAMPLES, replace=T)
d3 <- c()
for (i in 1:NUMSAMPLES){
d3[i] <- max(d1[i],d2[i])
}
hist(d3)
NUMSAMPLES <- 1000000
d1 <- sample(1:20, NUMSAMPLES, replace=T)
d2 <- sample(1:20, NUMSAMPLES, replace=T)
Advantage <- c()
for (i in 1:NUMSAMPLES){
Advantage[i] <- max(d1[i],d2[i])
}
hist(Advantage)
1e5
10000
1e5==10000
1e5==100000
shiny::runApp('Desktop/berkeley/IB114/2021/ModelingApp')
runApp('Desktop/berkeley/IB114/2021/ModelingApp')
shiny::runApp('Desktop/berkeley/IB114/2021/ModelingApp')
runApp('Desktop/berkeley/IB114/2021/ModelingApp')
runApp('Desktop/berkeley/IB114/2021/ModelingApp')
runApp('Desktop/berkeley/IB114/2021/ModelingApp')
runApp('Desktop/berkeley/IB114/2021/ModelingApp')
runApp('Desktop/berkeley/IB114/2021/ModelingApp')
runApp('Desktop/berkeley/IB114/2021/ModelingApp')
runApp('Desktop/berkeley/IB114/2021/ModelingApp')
runApp('Desktop/berkeley/IB114/2021/ModelingApp')
Sys.Date()
Sys.Time()
Sys.time()
hist(advantage) #plot them
source("~/Desktop/berkeley/Boots Lab/LabMeetingExample/example_code.R", echo=TRUE)
###############
#Make the plot#
###############
time <- Sys.time()
hist(advantage,main=paste("Histogram of advantage,",time)) #plot them
setwd("~/Desktop/berkeley/Boots Lab/LabMeetingExample")
png(filename = paste("Histogram of advantage,",time))
hist(advantage,main=paste("Histogram of advantage,",time))#plot them
dev.off()
###############
#Make the plot#
###############
time <- Sys.time()
png(filename = paste("plots/Histogram of advantage,",time))
hist(advantage,main=paste("Histogram of advantage,",time))#plot them
dev.off()
Sys.time()
Sys.time()
Sys.Date()
source("~/Desktop/berkeley/Boots Lab/LabMeetingExample/example_code.R", echo=TRUE)
